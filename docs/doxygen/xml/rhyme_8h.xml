<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="rhyme_8h" kind="file" language="C++">
    <compoundname>rhyme.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes refid="tree_8h" local="no">tree.h</includes>
    <incdepgraph>
      <node id="24">
        <label>stdbool.h</label>
      </node>
      <node id="25">
        <label>tree.h</label>
        <link refid="tree_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>rhyme/src/rhyme.h</label>
        <link refid="rhyme_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>list.h</label>
        <link refid="list_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct__Word" prot="public">_Word</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="rhyme_8h_1aae7c8a41a1ad079e312daf3f57c7a653" prot="public" static="no">
        <type>struct <ref refid="struct__Word" kindref="compound">_Word</ref></type>
        <definition>typedef struct _Word Word</definition>
        <argsstring></argsstring>
        <name>Word</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rhyme/src/rhyme.h" line="5" column="1" bodyfile="rhyme/src/rhyme.h" bodystart="6" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="rhyme_8h_1a4043e79e55782cf768b7308dcad7ffbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_tree</definition>
        <argsstring>(Tree *node, int level)</argsstring>
        <name>print_tree</name>
        <param>
          <type><ref refid="structTree" kindref="compound">Tree</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rhyme/src/rhyme.h" line="13" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rhyme_8h_1ac981b8500f1377b39bbd11bacfdeeb88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reverse_string</definition>
        <argsstring>(char *word)</argsstring>
        <name>reverse_string</name>
        <param>
          <type>char *</type>
          <declname>word</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rhyme/src/rhyme.h" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rhyme_8h_1a1a488be8e6d05353c2a6b4ff138e06c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compare</definition>
        <argsstring>(void *word1, void *word2)</argsstring>
        <name>compare</name>
        <param>
          <type>void *</type>
          <declname>word1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>word2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rhyme/src/rhyme.h" line="17" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rhyme_8h_1a93842818707766437e9a2328650f1a03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structList" kindref="compound">List</ref> *</type>
        <definition>List* cutList</definition>
        <argsstring>(List *list, int count)</argsstring>
        <name>cutList</name>
        <param>
          <type><ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rhyme/src/rhyme.h" line="19" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rhyme_8h_1ab9e2e4dd1302a78889a58fd421d79c6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structList" kindref="compound">List</ref> *</type>
        <definition>List* arbreEnList</definition>
        <argsstring>(Tree *tree, List *list, int stage)</argsstring>
        <name>arbreEnList</name>
        <param>
          <type><ref refid="structTree" kindref="compound">Tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rhyme/src/rhyme.h" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rhyme_8h_1a6802dd93c119ac80f75454fce0f8e549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void finalList</definition>
        <argsstring>(Tree *tree, List *list, char *word, int cpt, int threshold)</argsstring>
        <name>finalList</name>
        <param>
          <type><ref refid="structTree" kindref="compound">Tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>word</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cpt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rhyme/src/rhyme.h" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rhyme_8h_1a4a5b21e8ee23f1e951aca6ef0cf06c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structList" kindref="compound">List</ref> *</type>
        <definition>List* match_word</definition>
        <argsstring>(Tree *tree, int count, char *word)</argsstring>
        <name>match_word</name>
        <param>
          <type><ref refid="structTree" kindref="compound">Tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>word</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rhyme/src/rhyme.h" line="25" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_RIME_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_RIME_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="tree_8h" kindref="compound">tree.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="rhyme_8h_1aae7c8a41a1ad079e312daf3f57c7a653" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__Word" kindref="compound">_Word</ref><sp/><ref refid="struct__Word" kindref="compound">Word</ref>;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="struct__Word" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__Word" kindref="compound">_Word</ref><sp/>{</highlight></codeline>
<codeline lineno="9" refid="struct__Word_1ab090ace4849f621274b5e45de57efc99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="struct__Word_1ab090ace4849f621274b5e45de57efc99" kindref="member">_pronunc</ref>;</highlight></codeline>
<codeline lineno="10" refid="struct__Word_1a59e9f91b2f07e506223b4bf52ee403c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="struct__Word_1a59e9f91b2f07e506223b4bf52ee403c5" kindref="member">_word</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal">};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rhyme_8h_1a4043e79e55782cf768b7308dcad7ffbd" kindref="member">print_tree</ref>(<ref refid="structTree" kindref="compound">Tree</ref>*<sp/>node,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)<sp/>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rhyme_8h_1ac981b8500f1377b39bbd11bacfdeeb88" kindref="member">reverse_string</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="classword" kindref="compound">word</ref>);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rhyme_8h_1a1a488be8e6d05353c2a6b4ff138e06c2" kindref="member">compare</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>word1,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*word2);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structList" kindref="compound">List</ref>*<sp/><ref refid="rhyme_8h_1a93842818707766437e9a2328650f1a03" kindref="member">cutList</ref>(<ref refid="structList" kindref="compound">List</ref>*<sp/>list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structList" kindref="compound">List</ref>*<sp/><ref refid="rhyme_8h_1ab9e2e4dd1302a78889a58fd421d79c6a" kindref="member">arbreEnList</ref>(<ref refid="structTree" kindref="compound">Tree</ref>*<sp/>tree,<ref refid="structList" kindref="compound">List</ref>*<sp/>list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stage);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rhyme_8h_1a6802dd93c119ac80f75454fce0f8e549" kindref="member">finalList</ref>(<ref refid="structTree" kindref="compound">Tree</ref>*<sp/>tree,<ref refid="structList" kindref="compound">List</ref>*<sp/>list,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classword" kindref="compound">word</ref>,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpt,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshold);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structList" kindref="compound">List</ref>*<sp/><ref refid="rhyme_8h_1a4a5b21e8ee23f1e951aca6ef0cf06c52" kindref="member">match_word</ref>(<ref refid="structTree" kindref="compound">Tree</ref>*<sp/>tree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classword" kindref="compound">word</ref>);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_RIME_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="rhyme/src/rhyme.h"/>
  </compounddef>
</doxygen>
