<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="list_8h" kind="file" language="C++">
    <compoundname>list.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includedby refid="tree_8h" local="no">tree/src/tree.h</includedby>
    <incdepgraph>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="4">
        <label>list/src/list.h</label>
        <link refid="list_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="9">
        <label>symphonie.h</label>
        <link refid="symphonie_8h"/>
      </node>
      <node id="7">
        <label>tree/src/tree.h</label>
        <link refid="tree_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>parser/src/parser.h</label>
        <link refid="parser_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>rhyme/src/rhyme.h</label>
        <link refid="rhyme_8h"/>
      </node>
      <node id="11">
        <label>syllabification/src/syllabification.h</label>
        <link refid="syllabification_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>list/src/list.h</label>
        <link refid="list_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct__List" prot="public">_List</innerclass>
    <innerclass refid="struct__ScoreSyllPhon" prot="public">_ScoreSyllPhon</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="list_8h_1af415aadeab887feeda9d2e42371a40b0" prot="public" static="no">
        <type>struct <ref refid="struct__List" kindref="compound">_List</ref></type>
        <definition>typedef struct _List List</definition>
        <argsstring></argsstring>
        <name>List</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="list/src/list.h" line="25" column="1" bodyfile="list/src/list.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="list_8h_1a635855f2315417070aa4dbae27b6e4a6" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* _compFunc) (void *, void *)</definition>
        <argsstring>)(void *, void *)</argsstring>
        <name>_compFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="list/src/list.h" line="14" column="1" bodyfile="list/src/list.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="list_8h_1a3a8f19288aa6b651b32daa5ab7d25410" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* _freeFunc) (void *)</definition>
        <argsstring>)(void *)</argsstring>
        <name>_freeFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="list/src/list.h" line="15" column="1" bodyfile="list/src/list.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="list_8h_1a8324198aec6dec4d8d77a0aa89b9f633" prot="public" static="no">
        <type>struct <ref refid="struct__ScoreSyllPhon" kindref="compound">_ScoreSyllPhon</ref></type>
        <definition>typedef struct _ScoreSyllPhon ScoreSyllPhon</definition>
        <argsstring></argsstring>
        <name>ScoreSyllPhon</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="list/src/list.h" line="15" column="1" bodyfile="list/src/list.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="list_8h_1a4a888b9969308fa868af9273c85c0bf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* list_get</definition>
        <argsstring>(List *list, int index)</argsstring>
        <name>list_get</name>
        <param>
          <type><ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="list/src/list.h" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1a62896b0cfe8dee886318a16233ab517e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structList" kindref="compound">List</ref> *</type>
        <definition>List* list_add</definition>
        <argsstring>(List *list, void *pointer)</argsstring>
        <name>list_add</name>
        <param>
          <type><ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="list/src/list.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1a4ce90ec0e117e0d33483eacb7fd6de11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structList" kindref="compound">List</ref> *</type>
        <definition>List* list_remove</definition>
        <argsstring>(List *list, int index)</argsstring>
        <name>list_remove</name>
        <param>
          <type><ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="list/src/list.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1a32cd409bcddb3f8e9bdef6cdfc2f9c07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int list_count</definition>
        <argsstring>(List *list)</argsstring>
        <name>list_count</name>
        <param>
          <type><ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="list/src/list.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1a1d00add7bac46092e4fd07605237a2fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* list_find</definition>
        <argsstring>(List *list, void *pointer)</argsstring>
        <name>list_find</name>
        <param>
          <type><ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="list/src/list.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1a4a9db04be8454603d6e2116d0d54c3f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void list_lock</definition>
        <argsstring>(List *list)</argsstring>
        <name>list_lock</name>
        <param>
          <type><ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="list/src/list.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1abc9b4cb87249552a271a99e4e290dbd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void list_unlock</definition>
        <argsstring>(List *list)</argsstring>
        <name>list_unlock</name>
        <param>
          <type><ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="list/src/list.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1a09ee852718e75a7c476308b01c59cfbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool list_is_locked</definition>
        <argsstring>(List *list)</argsstring>
        <name>list_is_locked</name>
        <param>
          <type><ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="list/src/list.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1a46f2172ed298d4fa1c009bba806d4221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void list_destroy</definition>
        <argsstring>(List *list, _freeFunc free)</argsstring>
        <name>list_destroy</name>
        <param>
          <type><ref refid="structList" kindref="compound">List</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="list_8h_1a3a8f19288aa6b651b32daa5ab7d25410" kindref="member">_freeFunc</ref></type>
          <declname>free</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="list/src/list.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="list_8h_1ac060f99a71d77aa1576d96cf6724b1de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structList" kindref="compound">List</ref> *</type>
        <definition>List* list_new</definition>
        <argsstring>(_compFunc comp)</argsstring>
        <name>list_new</name>
        <param>
          <type><ref refid="list_8h_1a635855f2315417070aa4dbae27b6e4a6" kindref="member">_compFunc</ref></type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="list/src/list.h" line="50" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="9"><highlight class="preprocessor">#ifndef<sp/>_LIST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_LIST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="list_8h_1af415aadeab887feeda9d2e42371a40b0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__List" kindref="compound">_List</ref><sp/><ref refid="structList" kindref="compound">List</ref>;</highlight></codeline>
<codeline lineno="14" refid="list_8h_1a635855f2315417070aa4dbae27b6e4a6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="list_8h_1a635855f2315417070aa4dbae27b6e4a6" kindref="member">_compFunc</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="15" refid="list_8h_1a3a8f19288aa6b651b32daa5ab7d25410" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="list_8h_1a3a8f19288aa6b651b32daa5ab7d25410" kindref="member">_freeFunc</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="struct__List" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__List" kindref="compound">_List</ref><sp/>{</highlight></codeline>
<codeline lineno="18" refid="struct__List_1afcc6effbeea05019d64a0fdcb99ebf9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct__List_1afcc6effbeea05019d64a0fdcb99ebf9c" kindref="member">_count</ref>;</highlight></codeline>
<codeline lineno="19" refid="struct__List_1acccc526abfc4d69b37bb167adc029107" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct__List_1acccc526abfc4d69b37bb167adc029107" kindref="member">_size</ref>;</highlight></codeline>
<codeline lineno="20" refid="struct__List_1aa424250bd616a9439c83b2521d13c242" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct__List_1aa424250bd616a9439c83b2521d13c242" kindref="member">_lock</ref>;</highlight></codeline>
<codeline lineno="21" refid="struct__List_1a79d2aa2126fed5346e46f58444872bf5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="list_8h_1a635855f2315417070aa4dbae27b6e4a6" kindref="member">_compFunc</ref><sp/><ref refid="struct__List_1a79d2aa2126fed5346e46f58444872bf5" kindref="member">_compare</ref>;</highlight></codeline>
<codeline lineno="22" refid="struct__List_1a6dc233faef712458daa3667ba09cfcbf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="struct__List_1a6dc233faef712458daa3667ba09cfcbf" kindref="member">_data</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="list_8h_1a8324198aec6dec4d8d77a0aa89b9f633" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__ScoreSyllPhon" kindref="compound">_ScoreSyllPhon</ref><sp/><ref refid="struct__ScoreSyllPhon" kindref="compound">ScoreSyllPhon</ref>;</highlight></codeline>
<codeline lineno="26" refid="struct__ScoreSyllPhon" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__ScoreSyllPhon" kindref="compound">_ScoreSyllPhon</ref><sp/>{</highlight></codeline>
<codeline lineno="27" refid="struct__ScoreSyllPhon_1ae559395e6a1d1d381ede53015b3c8c6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/><ref refid="struct__ScoreSyllPhon_1ae559395e6a1d1d381ede53015b3c8c6d" kindref="member">syllPhon</ref>;</highlight></codeline>
<codeline lineno="28" refid="struct__ScoreSyllPhon_1aeb8fd7a2eea4dd089105f875923fc034" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct__ScoreSyllPhon_1aeb8fd7a2eea4dd089105f875923fc034" kindref="member">score</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="list_8h_1a4a888b9969308fa868af9273c85c0bf5" kindref="member">list_get</ref>(<ref refid="structList" kindref="compound">List</ref>*<sp/>list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structList" kindref="compound">List</ref>*<sp/><ref refid="list_8h_1a62896b0cfe8dee886318a16233ab517e" kindref="member">list_add</ref>(<ref refid="structList" kindref="compound">List</ref>*<sp/>list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pointer);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structList" kindref="compound">List</ref>*<sp/><ref refid="list_8h_1a4ce90ec0e117e0d33483eacb7fd6de11" kindref="member">list_remove</ref>(<ref refid="structList" kindref="compound">List</ref>*<sp/>list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="list_8h_1a32cd409bcddb3f8e9bdef6cdfc2f9c07" kindref="member">list_count</ref>(<ref refid="structList" kindref="compound">List</ref>*<sp/>list);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="list_8h_1a1d00add7bac46092e4fd07605237a2fb" kindref="member">list_find</ref>(<ref refid="structList" kindref="compound">List</ref>*<sp/>list,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pointer);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="list_8h_1a4a9db04be8454603d6e2116d0d54c3f6" kindref="member">list_lock</ref>(<ref refid="structList" kindref="compound">List</ref>*<sp/>list);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="list_8h_1abc9b4cb87249552a271a99e4e290dbd6" kindref="member">list_unlock</ref>(<ref refid="structList" kindref="compound">List</ref>*<sp/>list);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="list_8h_1a09ee852718e75a7c476308b01c59cfbf" kindref="member">list_is_locked</ref>(<ref refid="structList" kindref="compound">List</ref>*<sp/>list);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="list_8h_1a46f2172ed298d4fa1c009bba806d4221" kindref="member">list_destroy</ref>(<ref refid="structList" kindref="compound">List</ref>*<sp/>list,<sp/><ref refid="list_8h_1a3a8f19288aa6b651b32daa5ab7d25410" kindref="member">_freeFunc</ref><sp/>free);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structList" kindref="compound">List</ref>*<sp/><ref refid="list_8h_1ac060f99a71d77aa1576d96cf6724b1de" kindref="member">list_new</ref>(<ref refid="list_8h_1a635855f2315417070aa4dbae27b6e4a6" kindref="member">_compFunc</ref><sp/>comp);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_LIST_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="list/src/list.h"/>
  </compounddef>
</doxygen>
